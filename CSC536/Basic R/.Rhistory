ls
clear
# To-do Exercise for Fun
# Write a code to simulate a random rolling of two-die for 900 times.
# Record a sum of the two face values, analyze and plot them,
# using a simple histogram, box plot,with statistical values (mean, median,
# and mode).
sample(1:20, size = 150)
# To-do Exercise for Fun
# Write a code to simulate a random rolling of two-die for 900 times.
# Record a sum of the two face values, analyze and plot them,
# using a simple histogram, box plot,with statistical values (mean, median,
# and mode).
sample(1:6, size = 150, replace = TRUE)
dicesSum
dicesSum <- mapply("+", d1, d2, SIMPLIFY = FALSE)
# To-do Exercise for Fun
# Write a code to simulate a random rolling of two-die for 900 times.
# Record a sum of the two face values, analyze and plot them,
# using a simple histogram, box plot,with statistical values (mean, median,
# and mode).
d1 <- sample(1:6, size = 900, replace = TRUE)
d2 <- sample(1:6, size = 900, replace = TRUE)
dicesSum <- mapply("+", d1, d2, SIMPLIFY = FALSE)
dicesSum
dicesSum <- Map("+", d1, d2)
dicesSum
dicesSum[1]
dicesSum[2]
View(dicesSum)
View(dicesSum)
dicesSum[2][1]
dicesSum[2][1]
dicesSum[2][1][1]
dicesSum <- d1+d2
dicesSum
plot(dicesSum, col = "dark red")
mean(dicesSum)
# More advanced histogram plot
set.seed(110)
a <- sample(1:6, size = 10000, replace = TRUE)
a
hist(a, breaks= c(0,1,2,3,4,5,6), freq = TRUE,border = "red",
xlab = "Sample values", main = "My sample")
hist(dicesSum, breaks= c(2:12), freq = TRUE,border = "red",
xlab = "Sample values", main = "My sample")
hist(dicesSum, breaks= c(2:12), freq = TRUE,border = "blue",
xlab = "Sample values", main = "My sample")
hist(dicesSum, breaks= c(2:12), freq = TRUE,border = "blue",xlab = "Sum", main = "Frequence of two dice summation")
hist(dicesSum, breaks= c(2:12), freq = TRUE,border = "blue",xlab = "Value", main = "Frequence of two dice summation")
abline(v = mean(dicesSum), col = "blue", lwd = 2)
abline(v = mean(dicesSum), col = "red", lwd = 2)
sumMean = mean(dicesSum)
text(mx, 12 , "big", cex = 5)
text(sumMean, 12 , "big", cex = 5)
text(sumMean, 7 , "big", cex = 5)
text(sumMean, 7 , "big", cex = 1)
text(sumMean, 7 , "mean", cex = 1)
hist(dicesSum, breaks= c(2:12), freq = TRUE,border = "blue",xlab = "Value", main = "Frequence of two dice summation")
abline(v = sumMean, col = "red", lwd = 2)
text(sumMean, 7 , "mean", cex = 1)
text(sumMean, 7 , "mean", cex = 1, col="red")
text(sumMean, 10 , "mean", cex = 1, col="red")
text(sumMean, 0 , "mean", cex = 1, col="red")
text(sumMean, -5 , "mean", cex = 1, col="red")
text(sumMean, 0 , "mean", cex = 1, col="red")
text(sumMean, 0 , "mean", cex = 0, col="red")
hist(dicesSum, breaks= c(2:12), freq = TRUE,border = "blue",xlab = "Value", main = "Frequence of two dice summation")
abline(v = sumMean, col = "red", lwd = 2)
text(sumMean, 0 , "mean", col="red")
hist(dicesSum, breaks= c(2:12), freq = TRUE,border = "blue",xlab = "Value", main = "Frequence of two dice summation")
abline(v = sumMean, col = "red", lwd = 2)
text(sumMean, 0 , "mean", col="red")
abline(v = sumMode, col = "green", lwd = 2)
text(sumMode, 0 , "mode", col="red")
abline(v = sumMedian, col = "red", lwd = 2)
sumMean = mean(dicesSum)
sumMode = mode(dicesSum)
sumMedian = median(dicesSum)
abline(v = sumMode, col = "green", lwd = 2)
sumMode
sumMode
sumMedian
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
sumMode = getmode(dicesSum)
sumMedian = median(dicesSum)
sumMode
abline(v = sumMode, col = "green", lwd = 2)
text(sumMode, 0 , "mode", col="red")
abline(v = sumMedian, col = "yellow", lwd = 2)
text(sumMedian, 0 , "yellow", col="red")
hist(dicesSum, breaks= c(2:12), freq = TRUE,border = "blue",xlab = "Value", main = "Frequence of two dice summation")
abline(v = sumMean, col = "red", lwd = 2)
text(sumMean, 0 , "mean", col="red")
abline(v = sumMode, col = "green", lwd = 2)
text(sumMode, 0 , "green", col="red")
abline(v = sumMedian, col = "yellow", lwd = 2)
boxplot(dicesSum)
boxplot(dicesSum, main="he")
boxplot(dicesSum, main="Box plot of summation of two dices")
boxplot(dicesSum, main="Box plot of summation of two dices", ylab="Value")
hist(dicesSum, breaks= c(2:12), freq = TRUE,border = "blue",xlab = "Value", main = "Frequence of two dice summation")
abline(v = sumMean, col = "red", lwd = 2)
text(sumMean, 0 , "mean", col="red")
abline(v = sumMode, col = "green", lwd = 2)
text(sumMode, 0 , "green", col="red")
abline(v = sumMedian, col = "yellow", lwd = 2)
text(sumMedian, 0 , "yellow", col="red")
text(sumMean, adj=[0,1], "mean", col="red")
text(sumMean, adj=0.5, "mean", col="red")
text(sumMean, adj=0, "mean", col="red")
text(sumMean, adj=0.4, "mean", col="red")
hist(dicesSum, breaks= c(2:12), freq = TRUE,border = "blue",xlab = "Value", main = "Frequence of two dice summation")
abline(v = sumMean, col = "red", lwd = 2)
text(sumMean, adj=0.2, "mean", col="red")
text(sumMean, adj=0.8, "mean", col="red")
text(sumMean, 1, "mean", col="red")
text(sumMean, 4, "mean", col="red")
text(sumMean, 4, 1,"mean", col="red")
text(label=sumMean, 4, "mean", col="red")
text(label=sumMean, 2,3, "mean", col="red")
text(label=sumMean, 2, "mean", col="red")
text(sumMean, 5, "mean", col="red")
text(sumMean, 10, "mean", col="red")
hist(dicesSum, breaks= c(2:12), freq = TRUE,border = "blue",xlab = "Value", main = "Frequence of two dice summation")
abline(v = sumMean, col = "red", lwd = 2)
text(sumMean, 10, "mean", col="red")
abline(v = sumMode, col = "green", lwd = 2)
text(sumMode, 30 , "green", col="red")
hist(dicesSum, breaks= c(2:12), freq = TRUE,border = "blue",xlab = "Value", main = "Frequence of two dice summation")
abline(v = sumMean, col = "red", lwd = 2)
text(sumMean, 10, "mean", col="red")
abline(v = sumMode, col = "green", lwd = 2)
text(sumMode, 30 , "mode", col="green")
abline(v = sumMedian, col = "yellow", lwd = 2)
text(sumMedian, 50 , "median", col="yellow")
hist(dicesSum, breaks= c(1:12), freq = TRUE,border = "blue",xlab = "Value", main = "Frequence of two dice summation")
hist(dicesSum, breaks= c(1:13), freq = TRUE,border = "blue",xlab = "Value", main = "Frequence of two dice summation")
hist(dicesSum, breaks= c(1:12), freq = TRUE,border = "blue",xlab = "Value", main = "Frequence of two dice summation")abline(v = sumMean, col = "red", lwd = 1)
hist(dicesSum, breaks= c(1:12), freq = TRUE,border = "blue",xlab = "Value",
main = "Frequence of two dice summation")
abline(v = sumMean, col = "red", lwd = 2)
text(sumMean, 10, "mean", col="red")
abline(v = sumMode, col = "green", lwd = 2)
text(sumMode, 30 , "mode", col="green")
abline(v = sumMedian, col = "yellow", lwd = 2)
text(sumMedian, 50 , "median", col="yellow")
got4
# In addition, find a probability of getting a sum of 4 of those 900 rolls.
got4 <- 0
for (s in dicesSum) {
if (s==4) {
got4 <- got4+1
}
}
got4
prob <- got4/900
print(prob)
setwd("~/Documents/works/csc-works/CSC536/Basic R")
# vector/sequence
a <- c("H","e","l","l","o")
a
str(a)  # check its structure
# vector/sequence
a <- c("H","e","l","l","o")
a
str(a)  # check its structure
length(a)
# Show how the indexing is used, e.g., from:to
# index starts from 1, and not 0 in R's vector/array
a[2:4]
a <- "Hello"
nchar(a)   # use nchar instead of length()
# string of characters
a <- "Hello"
a
str(a)  # check its structure
nchar(a)  # could not use the function length()
# Find a sub string, indicating the indices
substr(a,2,4)
# data frame and slicing
age=13:21
height=c(48, 47, 70, 50, 62, 60, 62, 72, 53)
students = data.frame(age, height)
View(students)
# rename if needed
students = data.frame(s_age=age, s_height=height)
# check a structure
str(students)
# print all rows, all columns
students
students[,]
# slicing; cut in a row-wise manner
students[students$s_age>=18,]  # but with all columns
students[students$s_age]
students[students.s_age]
# print all rows, all columns
students
# check a structure
str(students)
# print all rows, all columns
students
students[,]
students[s_age]
students[s_age,]
students[,]
students[students$s_age,]
students[students$s_age]
# slicing; cut in a row-wise manner
students[students$s_age>=18,]  # but with all columns
# dicing; cut in a column-wish manner
students[,c("s_age")] # but with all rows
# slicing; cut in a row-wise manner
students[students$s_age>=18,]  # but with all columns
# slicing and dicing
students[students$s_age>=15, c("s_age")]
students[students$s_age>=15, c("s_age","s_height")]
students[students$s_age>=15,]  # for all columns
students[students$s_age>=15, c("s_age","s_height")]
students[students$s_age>=15, 1] # 1th column only
students[students$s_age>=15, 2] # 2nd column
# dicing; cut in a column-wish manner
students[,c("s_age")] # but with all rows
students[students$s_age>=15, 1] # 1th column only
# slicing and dicing
students[students$s_age>=15, c("s_age")]
students$s_age,1
students$s_age
# access
students$s_age
# Sequence of integer
value <- seq(from = 5, to = 16, by = 2)
val <- 6:13 # or use this format
# Check the data first to better understand it
# Check a structure
str(val)
# Check type of each element
typeof(val)
# Make a vector
my_val <- c(2,4,6,9,10)
# Check the data first to better understand it
# Check a structure
str(my_val)
# Check type of each element
typeof(my_val)
class(my_val)
# do some simple statistics
range(my_val)
mean(my_val)
sd(my_val)  # standard deviation
summary(my_val) # some statistics
# find a quantile
quantile(my_val)
# Produce box-and-whisker plot(s)
boxplot(my_val)
boxplot(my_val, horizontal = TRUE)
boxplot(my_val, horizontal = TRUE, col = "lightblue",
main = "My first boxplot", xlab = "Simple values")
# try and compare to this new dataset
my_val <- c(2,4,6,9,10,30,50)
# there is a skewness to the right of the boxplot
boxplot(my_val)
my_val[4] = 10  # reassign an element value
my_val
table(my_val) # a simple contigency table, show frequencies
sort(table(my_val))
# tidyverse is a package for data science and analysis
library(tidyverse)
library(socviz)
library(gapminder)
library(ggplot2)
# datasets of GDP of various countries
gapminder
gap <- gapminder
# see structure
str(gap)
# see structure
str(gap)
